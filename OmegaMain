#!/usr/bin/env python3
# coding: utf-8

import os
import random
import datetime
import sqlite3
import ssl
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import (
    Flask, render_template, request, session, redirect, url_for,
    flash, jsonify, g
)
from jinja2 import DictLoader
from werkzeug.security import generate_password_hash, check_password_hash
import openai

def ensure_confirmation_columns(db):
    # db ist z.B. sqlite3.Connection mit row_factory auf dict gesetzt
    cur = db.execute("PRAGMA table_info(users);")
    existing = [row["name"] for row in cur.fetchall()]
    if "confirmation_code" not in existing:
        db.execute("ALTER TABLE users ADD COLUMN confirmation_code TEXT;")
    if "confirmation_code_sent_at" not in existing:
        db.execute("ALTER TABLE users ADD COLUMN confirmation_code_sent_at TIMESTAMP;")
    db.commit()

# ==================== KONFIGURATION ====================

openai.api_key = "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"

from flask_mail import Mail, Message
from flask import Flask

app = Flask(__name__)

import sqlite3

# Verbindung zur Datenbank herstellen (oder erstellen, falls sie nicht existiert)
conn = sqlite3.connect('app.db')
cursor = conn.cursor()

# √Ñnderungen speichern und Verbindung schlie√üen
conn.commit()
conn.close()

# GMX SMTP-Server-Konfiguration
app.config['MAIL_SERVER'] = 'mail.gmx.net'  # GMX SMTP-Server
app.config['MAIL_PORT'] = 587  # Der Standardport f√ºr TLS
app.config['MAIL_USE_TLS'] = True  # TLS verschl√ºsselte Verbindung
app.config['MAIL_USE_SSL'] = False  # Kein SSL erforderlich
app.config['MAIL_USERNAME'] = 'MaxLemmermann@gmx.de'  # Deine GMX E-Mail-Adresse
app.config['MAIL_PASSWORD'] = 'Max#2012'  # Dein GMX E-Mail-Passwort
app.config['MAIL_DEFAULT_SENDER'] = 'MaxLemmermann@gmx.de'  # Absenderadresse (deine GMX E-Mail-Adresse)

# Initialisiere das Mail-Objekt
mail = Mail(app)

DATABASE = 'app.db'

# ==================== Templates ====================

templates = {
    "layout.html": """
<!DOCTYPE html>
<html lang=\"de\">
<head>
<meta charset=\"UTF-8\" />
<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />
<title>OmegaAI - {% block title %}{% endblock %}</title>
<style>
  :root {
    --bg-color: #121212;
    --card-bg: #1e1e1e;
    --text-light: #eee;
    --text-dark: #222;
    --accent: #0a84ff;
    --error: #f44336;
    --success: #4caf50;
    --info: #2196f3;
  }
  * {
    box-sizing: border-box;
  }
  body {
    margin: 0;
    font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;
    background: var(--bg-color);
    color: var(--text-light);
    height: 100vh;
    display: flex;
    flex-direction: column;
  }
  header {
    background: var(--card-bg);
    padding: 1rem 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 2px solid var(--accent);
  }
  header h1 {
    margin: 0;
    font-weight: 700;
    font-size: 1.5rem;
    user-select: none;
  }
  .top-right-buttons {
    position: fixed;
    top: 10px;
    right: 20px;
    display: flex;
    gap: 10px;
    align-items: center;
    z-index: 1000;
  }
  .top-right-buttons .btn {
    background-color: #222;
    color: white;
    padding: 7px 14px;
    border-radius: 5px;
    font-weight: 600;
    text-decoration: none;
    transition: background-color 0.3s ease;
    font-size: 14px;
  }
  .top-right-buttons .btn:hover {
    background-color: #0056b3;
  }
  .top-right-buttons .upgrade-btn {
    background-color: #28a745;
  }
  .top-right-buttons .upgrade-btn:hover {
    background-color: #1e7e34;
  }
.button-link {
  display: inline-block;
  background-color: var(--accent);
  color: var(--text-dark);
  text-decoration: none;
  padding: 0.6rem 1.2rem;
  border-radius: 30px;
  font-weight: 600;
  transition: background-color 0.3s ease;
}
.button-link:hover {
  background-color: #0070f3aa;
}

  main {
    flex: 1 0 auto;
    padding: 1rem 1.5rem;
    max-width: 960px;
    margin: 0 auto;
    width: 100%;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
  }
  .card {
    background: var(--card-bg);
    padding: 1rem 1.5rem;
    border-radius: 12px;
    box-shadow: 0 0 14px var(--accent);
  }
  .page-title {
    margin-top: 0;
    margin-bottom: 1rem;
    font-weight: 700;
    font-size: 2rem;
    user-select: none;
  }
  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  input[type=\"text\"], input[type=\"email\"], input[type=\"password\"], input[type=\"code\"] {
    padding: 0.75rem 1rem;
    font-size: 1rem;
    border-radius: 12px;
    border: none;
    background: #333;
    color: var(--text-light);
    outline-offset: 4px;
    outline-color: transparent;
    transition: outline-color 0.3s ease;
  }
  input[type=\"text\"]:focus, input[type=\"email\"]:focus, input[type=\"password\"]:focus, input[type=\"code\"]:focus {
    outline-color: var(--accent);
  }
  button[type=\"submit\"], button {
    cursor: pointer;
    background: var(--accent);
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 12px;
    color: var(--text-dark);
    font-weight: 700;
    font-size: 1rem;
    user-select: none;
    transition: background 0.3s ease;
  }
  button[type=\"submit\"]:hover, button:hover {
    background: #0066ff;
    color: #fff;
  }
  .error-msg {
    color: var(--error);
    font-weight: 700;
    margin-bottom: 1rem;
    user-select: none;
  }
  .flash-message {
    border-radius: 12px;
    padding: 1rem 1.5rem;
    margin-bottom: 1rem;
    font-weight: 700;
    user-select: none;
  }
  .flash-success {
    background-color: var(--success);
    color: var(--text-dark);
  }
  .flash-error {
    background-color: var(--error);
    color: var(--text-light);
  }
  .flash-info {
    background-color: var(--info);
    color: var(--text-light);
  }
  /* Chat Styling */
  #chat-box {
    flex-grow: 1;
    overflow-y: auto;
    background: #1e3a8a;
    padding: 1rem;
    border-radius: 12px;
    max-height: 60vh;
    user-select: text;
  }
  .message {
    margin-bottom: 2.8rem;
    max-width: 70%;
    padding: 0.5rem 1rem;
    border-radius: 12px;
    line-height: 2rem;
    white-space: pre-wrap;
    word-wrap: break-word;
    user-select: text;
  }
  .message.user {
    background: #0a84ff;
    color: #fff;
    align-self: flex-end;
  }
  .message.bot {
    background: #444;
    color: #ddd;
    align-self: flex-start;
  }
  #chat-form {
    margin-top: 2.4rem;
    display: flex;
    align-items: center;
    width: 100%;
    box-sizing: border-box;
    padding: 0 0.8rem;
  }
  #chat-form input[type=\"text\"] {
    height: 45px;
    font-size: 1.1rem;
    background: #333;
    border: none;
    color: var(--text-light);
    outline: none;
    border-top-left-radius: 30px;
    border-bottom-left-radius: 30px;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    flex-grow: 1;
  }
  #chat-form button {
    background: var(--accent);
    border: none;
    height: 20px;
    width: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-top-right-radius: 30px;
    border-bottom-right-radius: 30px;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    flex-shrink: 0;
  }
  #chat-form button::before {
    content: \"\";
    font-size: 1.5rem;
    color: var(--text-dark);
  }
</style>
</head>
<body>
<header style="position: fixed; top: 0; right: 0; left: 0; z-index: 9999; background: #0d1117; padding: 0.8rem 1.5rem; display: flex; justify-content: space-between; align-items: center;">
  <h1 style="color: #fff; font-size: 1.4rem; margin: 0;">OmegaAI</h1>
  <div class="top-right-buttons" style="display: flex; gap: 0.6rem;">
    <a href="{{ url_for('upgrade_page') }}" class="btn upgrade-btn">ü§ë Upgrade</a>
    <a href="{{ url_for('chat_page') }}" class="btn chat-btn">üí¨ Chat</a>
    <a href="{{ url_for('history_page') }}" class="btn history-btn">üìú Chatverlauf</a>
    <a href="{{ url_for('choose_device') }}" class="btn mobile-btn">üì±Handy-Version</a>
    <a href="{{ url_for('register') }}" class="btn register-btn">üìù Registrieren</a>
    <a href="{{ url_for('login') }}" class="btn login-btn">üîë Login</a>
  </div>
</header>

<!-- Abstand unter dem fixierten Header -->
<div style="height: 4.5rem;"></div>

  <main>
    {% block content %}{% endblock %}
  </main>
</body>
</html>
""",

"choose_device.html": """
{% extends "layout.html" %}
{% block title %}Ger√§t w√§hlen{% endblock %}
{% block content %}
  <div class="wrapper">
    <div class="card">
      <h1 class="title">Willkommen</h1>
      <p class="subtitle">Mit welchem Ger√§t benutzt du OmegaAI?</p>

      <div class="buttons">
        <button class="choice" data-device="pc" aria-label="Ich bin auf PC">üñ•Ô∏è PC</button>
        <button class="choice" data-device="mobile" aria-label="Ich bin auf Handy">üì± Handy</button>
      </div>

      <div class="auto-detect" aria-live="polite">
        <p>Oder automatisch erkennen...</p>
        <button id="auto-detect-btn" aria-label="Automatisch erkennen">Automatisch erkennen</button>
      </div>

      <div class="note">
        <p>Du kannst deine Auswahl sp√§ter √§ndern: <span id="change-link">zur√ºck w√§hlen</span></p>
      </div>
    </div>
  </div>

  <script>
    function applyAndRedirect(device) {
      localStorage.setItem('deviceType', device);
      // Optional: Weiterleitung mit Param, z.B. /login?device=mobile
      window.location.href = '/login';
    }

    document.querySelectorAll('.choice').forEach(btn => {
      btn.addEventListener('click', () => {
        const device = btn.getAttribute('data-device');
        applyAndRedirect(device);
      });
    });

    document.getElementById('auto-detect-btn').addEventListener('click', () => {
      const isMobile = /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent) || window.innerWidth <= 900;
      applyAndRedirect(isMobile ? 'mobile' : 'pc');
    });

    // Wenn schon gew√§hlt, direkt weiter
    const existing = localStorage.getItem('deviceType');
    if (existing) {
      // kleine Verz√∂gerung damit man sieht dass erkannt wurde
      setTimeout(() => applyAndRedirect(existing), 400);
    }

    // √Ñnderung erlauben: einfach l√∂schen und neu w√§hlen
    document.getElementById('change-link').addEventListener('click', () => {
      localStorage.removeItem('deviceType');
      // bleibt hier, kann neu w√§hlen
    });
  </script>

  <style>
    :root {
      --bg: #0c0e1a;
      --card: #131926;
      --text: #e5e8ef;
      --muted: rgba(229,232,239,0.6);
      --accent: #8fbfe0;
      --radius: 16px;
      --shadow: 0 40px 100px -20px rgba(0,0,0,0.6);
      --transition: 0.35s cubic-bezier(.4,.2,.2,1);
    }
    * { box-sizing: border-box; }

    html, body {
      margin: 0;
      padding: 0;
      background: var(--bg);
      color: var(--text);
      font-family: "Segoe UI", system-ui,-apple-system,sans-serif;
      -webkit-font-smoothing: antialiased;
      min-height: 100%;
      scroll-behavior: smooth;
    }

    .wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem 1rem;
      min-height: 100vh;
    }

    .card {
      width: 100%;
      max-width: 600px;
      padding: 2.5rem 2rem;
      background: var(--card);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      position: relative;
      overflow: hidden;
      text-align: center;
      transition: transform var(--transition), box-shadow var(--transition);
    }
    .card:hover {
      transform: translateY(-2px);
    }

    .title {
      margin: 0;
      font-size: 2.75rem;
      font-weight: 700;
      letter-spacing: 0.5px;
    }

    .subtitle {
      margin: 0;
      font-size: 1.1rem;
      color: var(--muted);
    }

    .buttons {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-top: 0.5rem;
    }

    .choice {
      flex: 1 1 180px;
      padding: 1.2rem 1.5rem;
      border-radius: 12px;
      border: 2px solid var(--accent);
      background: none;
      color: var(--text);
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all var(--transition);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    .choice[data-device="pc"] {
      background: rgba(255,255,255,0.05);
    }
    .choice[data-device="mobile"] {
      background: rgba(143,191,224,0.08);
    }
    .choice:hover {
      filter: brightness(1.08);
      transform: translateY(-1px);
    }

    .auto-detect {
      margin-top: 0.5rem;
      font-size: 0.9rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 6px;
    }
    #auto-detect-btn {
      padding: 0.9rem 1.2rem;
      border-radius: 10px;
      background: var(--accent);
      border: none;
      color: #0c0e1a;
      font-weight: 600;
      cursor: pointer;
      transition: transform var(--transition), filter var(--transition);
    }
    #auto-detect-btn:hover {
      transform: translateY(-1px);
      filter: brightness(1.05);
    }

    .note {
      font-size: 0.8rem;
      color: var(--muted);
    }
    #change-link {
      text-decoration: underline;
      cursor: pointer;
      color: var(--accent);
    }

    @media (max-width: 900px) {
      .title {
        font-size: 2.25rem;
      }
      .choice {
        flex: 1 1 100%;
        font-size: 1rem;
      }
      .card {
        padding: 2rem 1.5rem;
      }
    }
  </style>
{% endblock %}
""",

"login.html": """
{% extends "layout.html" %}
{% block title %}Login{% endblock %}
{% block content %}
  <div class="container">
<head>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap" rel="stylesheet">
  <style>
    .page-title {
      font-family: 'Poppins', sans-serif;
      color: #f0f0f5; /* fast wei√ü mit minimalem Blau-/Grau-Stich */
      text-shadow: 1px 1px 3px rgba(0,0,0,0.2); /* leichter Schatten f√ºr Tiefe */
      font-weight: 600;
      font-size: 2.8rem;
      margin: 30px 0;
      letter-spacing: 0.03em;
    }
  </style>
</head>
<body>
  <h1 class="page-title">Willkommen bei OmegaAI! Kennen Sie uns schon?</h1>
</body>
    <div class="card" role="main" aria-label="Login Formular">
      <div id="error-msg" class="error-msg" role="alert" style="display:none;"></div>
      <form id="login-form" method="post" autocomplete="off" novalidate onsubmit="return checkLogin();">
        <input type="text" id="username" name="username" placeholder="Benutzername" required autofocus aria-label="Benutzername">
        <input type="password" id="password" name="password" placeholder="Passwort" required aria-label="Passwort">
        <label class="checkbox-label">
          <input type="checkbox" name="remember" aria-label="Angemeldet bleiben">
          Angemeldet bleiben
        </label>
        <button type="submit" aria-label="Anmelden">Login</button>
      </form>
    </div>
  </div>

  <script>
    function checkLogin() {
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      const errorBox = document.getElementById('error-msg');

      if (username === "Max" && password === "Max#2012") {
        sessionStorage.setItem("username", "Max");
        sessionStorage.setItem("role", "admin");
        window.location.href = "/chat_page";
        return false; // verhindert echtes Absenden
      } else {
        errorBox.textContent = "Falscher Benutzername oder Passwort.";
        errorBox.style.display = "block";
        return false;
      }
    }
  </script>

  <style>
    :root {
      --bg: #0c0e1a;
      --card: #131926;
      --input-bg: #0f142a;
      --text: #e5e8ef;
      --muted: rgba(229,232,239,0.6);
      --radius: 14px;
      --accent: #8fbfe0;
      --shadow: 0 30px 80px -15px rgba(0,0,0,0.6);
      --transition: 0.35s cubic-bezier(.4,.2,.2,1);
    }

    * { box-sizing: border-box; }

    html, body {
      margin: 0;
      padding: 0;
      background: var(--bg);
      color: var(--text);
      font-family: "Segoe UI", system-ui,-apple-system,sans-serif;
      -webkit-font-smoothing: antialiased;
      min-height: 100%;
      scroll-behavior: smooth;
    }

    .container {
      max-width: 700px;  /* Larger container for desktop */
      margin: 0 auto;
      padding: 3rem 1rem;
    }

    .page-title {
      text-align: center;
      color: var(--text);
      margin: 2rem 0;
      font-size: 3rem;  /* Increased font size for PC */
      font-weight: 600;
      letter-spacing: 0.5px;
    }

    .card {
      margin: 1rem auto;
      padding: 3rem;  /* Increased padding for larger appearance */
      background: var(--card);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      position: relative;
      overflow: hidden;
      transition: transform var(--transition), box-shadow var(--transition);
      width: 100%;  /* Full width on desktop */
      max-width: 500px; /* Limiting max width */
    }

    #login-form {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    input {
      width: 100%;
      padding: 1.25rem 1.5rem;  /* Increased padding for input fields */
      background: var(--input-bg);
      border: 1px solid rgba(255,255,255,0.08);
      border-radius: 12px;
      color: var(--text);
      font-size: 1.25rem;  /* Larger font for input fields */
      outline: none;
      transition: border var(--transition), background var(--transition);
    }

    input:focus {
      border-color: var(--accent);
      background: rgba(143,191,224,0.05);
    }

    .checkbox-label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 1.1rem;
      color: var(--text);
      cursor: pointer;
      user-select: none;
    }

    .checkbox-label input {
      width: 20px;  /* Larger checkbox */
      height: 20px;
      accent-color: var(--accent);
      margin: 0;
      flex-shrink: 0;
    }

    button[type="submit"] {
      width: 100%;
      padding: 1.5rem;
      background: var(--accent);
      color: #0c0e1a;
      border: none;
      border-radius: 12px;
      font-size: 1.5rem;  /* Increased font size for button */
      cursor: pointer;
      font-weight: 600;
      transition: filter var(--transition), transform var(--transition);
      box-shadow: 0 12px 30px -5px rgba(143,191,224,0.6);
    }

    button[type="submit"]:hover {
      transform: translateY(-1px);
      filter: brightness(1.05);
    }

    .error-msg {
      background: #ff5555;
      color: white;
      padding: 0.7rem;
      border-radius: 8px;
      text-align: center;
      font-size: 1rem;  /* Larger font size for error message */
      animation: pop .4s ease-out;
    }

    @keyframes pop {
      from { transform: scale(0.95); opacity: 0; }
      to { transform: scale(1); opacity: 1; }
    }

    /* Mobile */
    @media (max-width: 800px) {
      .container {
        padding: 2rem 1rem;
      }

      .page-title {
        font-size: 2rem;  /* Smaller title on mobile */
      }

      input {
        font-size: 1rem;  /* Adjust input font size */
      }

      button[type="submit"] {
        font-size: 1.2rem;
        padding: 1rem;
      }

      .card {
        margin: 1rem;
        padding: 2rem;
      }
    }
  </style>
{% endblock %}
""",

"register.html": """
{% extends "layout.html" %}
{% block title %}Registrierung{% endblock %}
{% block content %}
  <div class="container">
    <h1 class="page-title">Willkommen bei OmegaAI! Es ist uns ein Vergn√ºgen Sie kennen zu lernen!</h1>
    <div class="card" role="main" aria-label="Registrierungsformular">
      {% if error %}<div class="error-msg" role="alert">{{ error }}</div>{% endif %}
      {% if step == 1 %}
      <form method="post" autocomplete="off" novalidate>
        <input type="text" name="username" placeholder="Benutzername" required autofocus aria-label="Benutzername" value="{{ username|default('') }}">
        <input type="email" name="email" placeholder="E-Mail" required aria-label="E-Mail" value="{{ email|default('') }}">
        <input type="password" name="password" placeholder="Passwort (mind. 6 Zeichen)" required aria-label="Passwort">
        <button type="submit" aria-label="Registrierung">Registrierung</button>
      </form>
      <button id="temp-chat-btn-register" aria-label="Abgemeldet bleiben, tempor√§rer Chat ohne Registrierung">Abgemeldet bleiben (tempor√§r, ohne Registrierung)</button>
      {% elif step == 2 %}
      <p>Ein Best√§tigungscode wurde an <b>{{ email }}</b> gesendet.</p>
      <form method="post" novalidate autocomplete="off">
        <input type="text" name="code" placeholder="6-stelliger Code" required autofocus aria-label="Best√§tigungscode eingeben">
        {% if error %}<div class="error-msg" role="alert">{{ error }}</div>{% endif %}
        <button type="submit" aria-label="Code best√§tigen">Code best√§tigen</button>
      </form>
      <form method="post" novalidate>
        <button type="submit" name="resend" value="1" aria-label="Code erneut senden">Code erneut senden</button>
      </form>
      {% endif %}
    </div>
  </div>

  <!-- Modal f√ºr tempor√§ren Chat -->
  <div id="temp-chat-modal-register" role="dialog" aria-modal="true" aria-labelledby="temp-chat-title-register" aria-describedby="temp-chat-desc-register" style="display:none;">
    <div class="temp-chat-modal-content">
      <h2 id="temp-chat-title-register">Tempor√§rer Chat - Nutzungsbedingungen</h2>
      <div id="temp-chat-desc-register">
        <p>Wenn du diesen tempor√§ren Chat nutzt, akzeptierst du, dass:</p>
        <ul>
          <li>Nach Verlassen der Seite wird der gesamte Chatverlauf <b>gel√∂scht</b>.</li>
          <li>Es wird <b>kein Verlauf</b> gespeichert.</li>
          <li>Du brauchst keinen Account.</li>
          <li>Du musst einen Benutzernamen angeben.</li>
        </ul>
      </div>
      <input type="text" id="temp-username-register" placeholder="Benutzername f√ºr tempor√§ren Chat" aria-label="Benutzername f√ºr tempor√§ren Chat" />
      <div id="temp-error-register">Bitte gib einen Benutzernamen ein.</div>
      <div class="temp-chat-buttons">
        <button id="temp-accept-register" class="accept">Akzeptieren & Chat starten</button>
        <button id="temp-cancel-register" class="reject">Abbrechen</button>
      </div>
    </div>
  </div>

  <script>
    const tempChatBtnRegister = document.getElementById('temp-chat-btn-register');
    const tempChatModalRegister = document.getElementById('temp-chat-modal-register');
    const tempAcceptBtnRegister = document.getElementById('temp-accept-register');
    const tempCancelBtnRegister = document.getElementById('temp-cancel-register');
    const tempUsernameInputRegister = document.getElementById('temp-username-register');
    const tempErrorRegister = document.getElementById('temp-error-register');

    tempChatBtnRegister.addEventListener('click', () => {
      tempChatModalRegister.style.display = 'flex';
      tempErrorRegister.style.display = 'none';
      tempUsernameInputRegister.value = '';
      tempUsernameInputRegister.focus();
    });

    tempCancelBtnRegister.addEventListener('click', () => {
      tempChatModalRegister.style.display = 'none';
    });

    tempAcceptBtnRegister.addEventListener('click', () => {
      const username = tempUsernameInputRegister.value.trim();
      if (!username) {
        tempErrorRegister.style.display = 'block';
        tempUsernameInputRegister.focus();
        return;
      }
      localStorage.setItem('tempUsername', username);
      window.location.href = "{{ url_for('chat_page') }}";
    });
  </script>

  <style>
    :root {
      --bg: #0c0e1a;
      --card: #131926;
      --input-bg: #0f142a;
      --text: #e5e8ef;
      --muted: rgba(229,232,239,0.6);
      --radius: 14px;
      --accent: #8fbfe0;
      --shadow: 0 30px 80px -15px rgba(0,0,0,0.6);
      --transition: 0.35s cubic-bezier(.4,.2,.2,1);
    }

    *{box-sizing:border-box;}

    html, body {
      margin: 0;
      padding: 0;
      background: var(--bg);
      color: var(--text);
      font-family: "Segoe UI", system-ui,-apple-system,sans-serif;
      -webkit-font-smoothing: antialiased;
      scroll-behavior: smooth;
    }

    .container {
      max-width: 500px;
      margin: 0 auto;
      padding: 1rem 0 2rem;
    }

    .page-title {
      text-align: center;
      color: var(--text);
      margin: 1.5rem 0 0.5rem;
      font-size: 2rem;
      font-weight: 600;
      letter-spacing: 0.5px;
    }

    .card {
      margin: 0.5rem 1rem 0;
      padding: 2rem;
      background: var(--card);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      display: flex;
      flex-direction: column;
      gap: 1rem;
      position: relative;
      overflow: hidden;
      transition: transform var(--transition), box-shadow var(--transition);
    }
    .card:hover {
      transform: translateY(-1px);
    }

    form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    input {
      width: 100%;
      padding: 0.85rem 1rem;
      background: var(--input-bg);
      border: 1px solid rgba(255,255,255,0.08);
      border-radius: 10px;
      color: var(--text);
      font-size: 1rem;
      outline: none;
      transition: border var(--transition), background var(--transition);
    }
    input:focus {
      border-color: var(--accent);
      background: rgba(143,191,224,0.05);
    }

    .error-msg {
      background: #ff5555;
      color: white;
      padding: 0.7rem;
      border-radius: 8px;
      text-align: center;
      font-size: 0.95rem;
      animation: pop .4s ease-out;
    }

    .temp-chat-modal-content {
      background: var(--card);
      padding: 1rem;
      border-radius: var(--radius);
      box-shadow: 0 0 14px var(--accent);
      color: var(--text);
      max-width: 400px;
      margin: 2rem auto;
      font-family: 'Segoe UI', sans-serif;
    }

    .temp-chat-buttons {
      display: flex;
      justify-content: space-between;
      gap: 1rem;
    }

    .temp-chat-buttons button {
      padding: 0.75rem;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      flex: 1;
    }

    .accept {
      background: var(--accent);
      color: white;
    }

    .reject {
      background: #f44336;
      color: white;
    }

    .link-btn {
      background: none;
      border: none;
      padding: 0;
      color: var(--accent);
      cursor: pointer;
      font-size: 0.9rem;
      text-decoration: underline;
      transition: opacity var(--transition);
    }

    .link-btn:hover {
      opacity: 0.85;
    }

    /* Mobile */
    @media (max-width: 800px) {
      .card {
        margin: 1rem;
        padding: 1.5rem;
      }
      .page-title {
        font-size: 1.75rem;
      }
      input {
        font-size: 0.95rem;
      }
      button[type="submit"] {
        font-size: 1rem;
        padding: 0.75rem;
      }
    }
  </style>
{% endblock %}
""",

"chat.html": """
{% extends "layout.html" %}
{% block title %}Chat{% endblock %}
{% block content %}

<!-- Chatbox -->
<div id="chat-box" role="log" aria-live="polite" aria-relevant="additions" tabindex="0" class="card" aria-label="Chatverlauf">
  <div style="font-weight:600; margin-bottom:8px; font-size:1rem; color:rgba(255,255,255,0.65);">üí¨ Chat</div>
  {% for msg in messages %}
    <div class="message {{ msg.role }}">{{ msg.text|e }}</div>
  {% endfor %}
</div>

<div id="temp-user-info" style="margin: 1rem 0; color: rgba(255,255,255,0.65); font-weight: bold;"></div>

<form id="chat-form" method="post" autocomplete="off" role="search" aria-label="Chat Eingabe">
  <div style="display: flex; align-items: center; width: 100%; gap: 6px;">
    <input id="chat-input" name="user_input" type="text" placeholder="Schreibe eine Nachricht..." aria-label="Chat Eingabe" required autofocus autocomplete="off" />

    <!-- Mikrofon-Button -->
    <button type="button" id="dictate-button" aria-label="Spracheingabe starten" 
            style="position: relative; z-index: 1000; background: none; border: none; width: 52px; height: 52px; cursor: pointer; display: flex; align-items: center; justify-content: center; padding:0;">
      <svg xmlns="http://www.w3.org/2000/svg" height="28" width="28" fill="#8fbfe0" viewBox="0 0 24 24">
        <path d="M12 14q-1.25 0-2.125-.875T9 11V5q0-1.25.875-2.125T12 2q1.25 0 2.125.875T15 5v6q0 1.25-.875 2.125T12 14Zm-1 7v-3.1q-2.875-.35-4.688-2.437Q4.5 13.375 4.5 10.5h2q0 2.3 1.6 3.9 1.6 1.6 3.9 1.6t3.9-1.6q1.6-1.6 1.6-3.9h2q0 2.875-1.813 4.963Q15.875 17.55 13 17.9V21Z"/>
      </svg>
    </button>

    <!-- Senden-Button -->
    <button type="submit" aria-label="Nachricht senden" id="send-button">
      <svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 24 24" aria-hidden="true">
        <path fill="none" stroke="#8fbfe0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M3 12l18-9-9 18-2-7-7-2z"/>
      </svg>
    </button>
  </div>
</form>

<style>
  :root {
    --bg: #0c0e1a;
    --card: #131926;
    --user-bg: #1f233d;
    --user-text: #e5e8ef;
    --bot-bg: #1a1f33;
    --bot-text: #c9cdd6;
    --input-bg: #0f142a;
    --accent: #8fbfe0; /* dezentes Babyblau */
    --border-radius: 14px;
    --shadow: 0 30px 80px -15px rgba(0,0,0,0.6);
    --transition: 0.35s cubic-bezier(.4,.2,.2,1);
  }

  html, body {
    margin: 0;
    padding: 0;
    background-color: var(--bg);
    color: #e5e8ef;
    height: 100%;
    font-family: "Segoe UI", system-ui,-apple-system,sans-serif;
    -webkit-font-smoothing: antialiased;
    scroll-behavior: smooth;
  }

  #chat-box {
    position: relative;
    height: calc(100vh - 12rem);
    overflow-y: auto;
    background-color: var(--card);
    color: #e5e8ef;
    padding: 1rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    margin: 1rem 1rem 2rem 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.35rem;
    border: 1px solid rgba(255,255,255,0.05);
    scrollbar-width: thin;
    scrollbar-color: rgba(255,255,255,0.1) transparent;
    transition: background var(--transition), box-shadow var(--transition);
  }

  #chat-box::-webkit-scrollbar {
    width: 8px;
  }
  #chat-box::-webkit-scrollbar-thumb {
    background: #F6F6F6);
    border-radius: 4px;
  }

  .message {
    max-width: 78%;
    padding: 0.85rem 1.25rem;
    line-height: 1.4;
    white-space: pre-wrap;
    word-wrap: break-word;
    position: relative;
    font-size: 0.97rem;
    display: inline-block;
    opacity: 0;
    transform: translateY(6px);
    animation: fadeIn 0.3s ease-out forwards;
    transition: background-color var(--transition), transform var(--transition), box-shadow var(--transition);
  }

  .message + .message {
    margin-top: 4px;
  }

  .message.user {
    align-self: flex-end;
    background-color: var(--user-bg);
    color: var(--user-text);
    border-radius: 16px 16px 4px 16px;
    box-shadow: 0 16px 40px -10px rgba(0,0,0,0.5);
  }

  .message.user::after {
    content: "";
    position: absolute;
    bottom: 2px;
    right: -8px;
    width: 0;
    height: 0;
    border-left: 8px solid var(--user-bg);
    border-top: 8px solid transparent;
  }

  .message.bot {
    align-self: flex-start;
    background-color: var(--bot-bg);
    color: var(--bot-text);
    border-radius: 16px 16px 16px 4px;
    box-shadow: 0 10px 30px -5px rgba(0,0,0,0.35);
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(6px); }
    to { opacity: 1; transform: translateY(0); }
  }

  #chat-form {
    margin-top: 1.2rem;
    display: flex;
    align-items: center;
    width: 100%;
    box-sizing: border-box;
    padding: 0 0.8rem;
    gap: 6px;
    transition: all var(--transition);
  }

  #chat-form input[type="text"] {
    flex-grow: 1;
    height: 44px;
    font-size: 1rem;
    background: var(--input-bg);
    border: 1px solid rgba(255,255,255,0.08);
    color: #e5e8ef;
    outline: none;
    border-radius: 100px;
    padding: 0 1rem;
    box-sizing: border-box;
    transition: border var(--transition), background var(--transition);
  }

  #chat-form input[type="text"]:focus {
    border-color: var(--accent);
    background: rgba(255,255,255,0.03);
  }

  #chat-form button[type="submit"] {
    background: none;
    border: none;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    border-radius: 50%;
    width: 46px;
    height: 46px;
    flex-shrink: 0;
    transition: transform var(--transition);
  }

  #chat-form button[type="submit"]:hover,
  #dictate-button:hover {
    transform: scale(1.06);
  }

  #dictate-button {
    flex-shrink: 0;
    border-radius: 50%;
    background: rgba(143,191,224,0.08);
    transition: background var(--transition), transform var(--transition);
  }

  #dictate-button.listening svg {
    fill: var(--accent);
    animation: pulse 1.4s infinite;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.08); }
    100% { transform: scale(1); }
  }

  .typing-indicator span {
    display: inline-block;
    width: 6px;
    height: 6px;
    background-color: var(--accent);
    border-radius: 50%;
    margin: 0 1px;
    animation: blink 1.4s infinite both;
  }

  @keyframes blink {
    0%, 80%, 100% { opacity: 0; }
    40% { opacity: 1; }
  }

  /* Responsive Mobil */
  @media (max-width: 700px) {
    #chat-box {
      height: calc(100vh - 11rem);
      margin: 0.6rem;
      padding: 0.75rem;
      font-size: 0.9rem;
    }

    .message {
      font-size: 0.9rem;
      padding: 0.65rem 1rem;
      max-width: 90%;
    }

    #chat-form {
      flex-direction: column;
      gap: 8px;
      padding: 0 0.5rem;
    }

    #chat-form input[type="text"] {
      width: 100%;
    }

    #chat-form button[type="submit"], #dictate-button {
      width: 100%;
      border-radius: 999px;
    }

    #dictate-button {
      height: 50px;
    }
  }
</style>

<script>
  const chatBox = document.getElementById('chat-box');
  const chatForm = document.getElementById('chat-form');
  const chatInput = document.getElementById('chat-input');
  const tempUserInfo = document.getElementById('temp-user-info');
  const dictateButton = document.getElementById('dictate-button');

  const tempUsername = localStorage.getItem('tempUsername');
  if (tempUsername) {
    tempUserInfo.textContent = 'Tempor√§rer Benutzer: ' + tempUsername + ' (kein Account)';
  }

  function scrollToBottom() {
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  function appendMessage(role, text) {
    const div = document.createElement('div');
    div.className = 'message ' + role;
    div.textContent = text;
    chatBox.appendChild(div);
    scrollToBottom();
  }

  function appendTypingIndicator() {
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot';
    typingDiv.id = 'typing-indicator';
    typingDiv.innerHTML = 'OmegaAI schreibt <span class="typing-indicator"><span></span><span></span><span></span></span>';
    chatBox.appendChild(typingDiv);
    scrollToBottom();
  }

  function removeTypingIndicator() {
    const typingDiv = document.getElementById('typing-indicator');
    if (typingDiv) typingDiv.remove();
  }

  chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const val = chatInput.value.trim();
    if (!val) return;

    appendMessage('user', val);
    chatInput.value = '';
    appendTypingIndicator();

    try {
      const res = await fetch('/chat_page', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_input: val })
      });
      const data = await res.json();
      removeTypingIndicator();
      if (data.reply) {
        appendMessage('bot', data.reply);
      } else {
        appendMessage('bot', 'Fehler bei der Antwort.');
      }
    } catch (error) {
      removeTypingIndicator();
      appendMessage('bot', 'Serverfehler.');
    }
  });

  scrollToBottom();

  // Diktierfunktion
  let recognition;
  if ('webkitSpeechRecognition' in window) {
    recognition = new webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.lang = 'de-DE';
    recognition.interimResults = false;

    recognition.onstart = () => {
      dictateButton.classList.add('listening');
    };
    recognition.onend = () => {
      dictateButton.classList.remove('listening');
    };
    recognition.onresult = (event) => {
      const result = event.results[0][0].transcript;
      chatInput.value = result;
      chatInput.focus();
    };
  }

  dictateButton.addEventListener('click', () => {
    if (recognition) {
      recognition.start();
    } else {
      alert("Spracherkennung wird nicht unterst√ºtzt.");
    }
  });
</script>
{% endblock %}
""",

"history.html": """
{% extends "layout.html" %}
{% block title %}Verlauf{% endblock %}
{% block content %}
  <div class="wrapper">
    <h1 class="page-title">üìú Chatverlauf</h1>

    {% if not logged_in %}
      <div class="empty-state">
        <p class="prompt">F√ºr den Chat-Verlauf bitte <strong>einloggen</strong> oder <strong>registrieren</strong>.</p>
        <div class="buttons">
          <a href="/login" class="btn primary">üîë Login</a>
          <a href="/register" class="btn outline">üìù Registrieren</a>
        </div>
      </div>
    {% else %}
      {% if history %}
        <div class="history-table-wrapper">
          <table class="history-table" aria-label="Chat Verlauf Tabelle">
            <thead>
              <tr>
                <th>Zeitpunkt</th>
                <th>Du</th>
                <th>OmegaAI</th>
              </tr>
            </thead>
            <tbody>
              {% for item in history %}
                <tr class="history-entry">
                  <td class="timestamp">{{ item['timestamp'] }}</td>
                  <td class="user">{{ item['user_message']|e }}</td>
                  <td class="bot">{{ item['bot_response']|e }}</td>
                </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      {% else %}
        <div class="no-history">
          <p>Kein Chatverlauf vorhanden.</p>
        </div>
      {% endif %}
    {% endif %}
  </div>

  <style>
    :root {
      --bg: #0c0e1a;
      --card: #131926;
      --surface: #1a1f33;
      --muted: rgba(229,232,239,0.6);
      --text: #e5e8ef;
      --border: rgba(255,255,255,0.08);
      --accent: #8fbfe0;
      --radius: 14px;
      --shadow: 0 30px 80px -15px rgba(0,0,0,0.6);
      --transition: 0.35s cubic-bezier(.4,.2,.2,1);
    }

    *{box-sizing:border-box;}
    html, body {
      margin: 0;
      padding: 0;
      background: var(--bg);
      color: var(--text);
      font-family: "Segoe UI", system-ui,-apple-system,sans-serif;
      -webkit-font-smoothing: antialiased;
      scroll-behavior: smooth;
    }

    .wrapper {
      max-width: 1000px;
      margin: 0 auto;
      padding: 1rem 1rem 2rem;
    }

    .page-title {
      text-align: center;
      font-size: 2rem;
      margin: 1rem 0 0.5rem;
      font-weight: 600;
      position: relative;
      letter-spacing: 0.5px;
    }

    .empty-state {
      margin: 2rem auto;
      background: var(--card);
      padding: 2rem;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      max-width: 600px;
      text-align: center;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      position: relative;
      overflow: hidden;
      transition: transform var(--transition), box-shadow var(--transition);
    }
    .empty-state:hover {
      transform: translateY(-2px);
    }

    .prompt {
      font-size: 1.1rem;
      margin: 0;
      line-height: 1.4;
    }

    .buttons {
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .btn {
      padding: 0.85rem 1.25rem;
      border-radius: 10px;
      font-size: 1rem;
      font-weight: 600;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 6px;
      transition: all var(--transition);
      cursor: pointer;
      border: 2px solid transparent;
    }

    .btn.primary {
      background: var(--accent);
      color: #0c0e1a;
    }
    .btn.primary:hover {
      filter: brightness(1.1);
      transform: translateY(-1px);
    }

    .btn.outline {
      background: none;
      color: var(--text);
      border: 2px solid var(--accent);
    }
    .btn.outline:hover {
      background: rgba(143,191,224,0.08);
      transform: translateY(-1px);
    }

    .history-table-wrapper {
      margin-top: 1rem;
      overflow-x: auto;
      background: var(--card);
      border-radius: var(--radius);
      padding: 1rem;
      box-shadow: var(--shadow);
    }

    .history-table {
      width: 100%;
      border-collapse: collapse;
      min-width: 700px;
    }

    .history-table thead th {
      text-align: left;
      padding: 12px 16px;
      border-bottom: 1px solid var(--border);
      font-weight: 600;
      position: sticky;
      top: 0;
      background: var(--card);
    }

    .history-table tbody tr {
      transition: background var(--transition);
    }

    .history-table tbody tr:not(:last-child) {
      border-bottom: 1px solid rgba(255,255,255,0.08);
    }

    .history-table tbody tr:hover {
      background: rgba(255,255,255,0.03);
    }

    .history-table td {
      padding: 12px 16px;
      vertical-align: top;
      word-break: break-word;
      font-size: 0.95rem;
    }

    .timestamp {
      color: var(--muted);
      white-space: nowrap;
      width: 140px;
    }

    .user, .bot {
      line-height: 1.4;
    }

    .no-history {
      margin: 2rem auto;
      background: var(--surface);
      padding: 1.5rem;
      border-radius: 10px;
      text-align: center;
      font-style: italic;
      color: var(--muted);
      max-width: 600px;
    }

    /* Mobile Hochkant */
    @media (max-width: 900px) {
      .history-table {
        min-width: unset;
        font-size: 0.9rem;
      }
      .history-table thead {
        display: none;
      }
      .history-table tbody tr {
        display: block;
        margin-bottom: 1rem;
        background: var(--surface);
        border-radius: 10px;
        padding: 0.75rem;
      }
      .history-table td {
        display: block;
        padding: 6px 10px;
      }
      .history-table td.timestamp {
        font-size: 0.75rem;
        margin-bottom: 4px;
      }
      .history-table td .user, .history-table td .bot {
        margin: 0;
      }
    }

    /* scrollbar */
    .wrapper::-webkit-scrollbar, .history-table-wrapper::-webkit-scrollbar {
      height: 10px;
      width: 10px;
    }
    .wrapper::-webkit-scrollbar-thumb, .history-table-wrapper::-webkit-scrollbar-thumb {
      background: rgba(143,191,224,0.4);
      border-radius: 5px;
    }
    .wrapper::-webkit-scrollbar-track, .history-table-wrapper::-webkit-scrollbar-track {
      background: rgba(0,0,0,0.05);
    }
  </style>
{% endblock %}
""",

"upgrade.html": """
{% extends "layout.html" %}
{% block title %}Upgrade{% endblock %}
{% block content %}

<!-- Upgrade Box -->
<div class="card" role="main" aria-label="Upgrade Optionen">
  <h1 class="page-title">ü§ë Upgrade</h1>
  {% if error %}<div class="error-msg" role="alert">{{ error }}</div>{% endif %}
  {% if success %}<div class="flash-message flash-success">{{ success }}</div>{% endif %}
  
  <p>Verbessere dein Erlebnis mit OmegaAI:</p>
  <ul>
    <li><b>Gratis:</b> Basisfunktionen, limitierte Chats</li>
    <li><b>Pro (6‚Ç¨/Monat):</b> Schnellere Antworten, h√∂here Limits, zus√§tzliche Funktionen</li>
    <li><b>Deluxe (12‚Ç¨/Monat):</b> Alle Pro-Funktionen plus unbegrenzte Nutzung, Priorit√§tsservice</li>
  </ul>
  
  <form method="post" autocomplete="off" novalidate aria-label="Upgrade Auswahl">
    <label>
      <input type="radio" name="plan" value="free" {% if current_plan == 'free' %}checked{% endif %}> Gratis
    </label><br>
    <label>
      <input type="radio" name="plan" value="pro" {% if current_plan == 'pro' %}checked{% endif %}> Pro (6‚Ç¨/Monat)
    </label><br>
    <label>
      <input type="radio" name="plan" value="deluxe" {% if current_plan == 'deluxe' %}checked{% endif %}> Deluxe (12‚Ç¨/Monat)
    </label>
    <br><br>
    
    <!-- Zahlungsdetails -->
    <div id="payment-details" style="display:none;">
      <p>Gib deine Zahlungsdaten ein:</p>
      <input type="text" name="payment_method" placeholder="PayPal oder Kreditkarte" aria-label="Zahlungsmethode" required>
      <input type="text" name="payment_info" placeholder="Details (z.B. PayPal E-Mail oder Kartennummer)" aria-label="Zahlungsdetails" required>
    </div>
    
    <button type="submit" aria-label="Upgrade durchf√ºhren" class="btn-upgrade">Upgrade durchf√ºhren</button>
  </form>
</div>

<script>
  const planRadios = document.querySelectorAll('input[name="plan"]');
  const paymentDetails = document.getElementById('payment-details');

  function togglePaymentDetails() {
    let checked = Array.from(planRadios).find(r => r.checked).value;
    if(checked === 'pro' || checked === 'deluxe') {
      paymentDetails.style.display = 'block';
      paymentDetails.querySelectorAll('input').forEach(i => i.required = true);
    } else {
      paymentDetails.style.display = 'none';
      paymentDetails.querySelectorAll('input').forEach(i => i.required = false);
    }
  }
  planRadios.forEach(r => r.addEventListener('change', togglePaymentDetails));
  togglePaymentDetails();
</script>

<style>
  :root {
    --bg: #0c0e1a;
    --card: #131926;
    --input-bg: #0f142a;
    --accent: #8fbfe0;
    --border-radius: 14px;
    --shadow: 0 30px 80px -15px rgba(0,0,0,0.6);
    --transition: 0.35s cubic-bezier(.4,.2,.2,1);
  }

  html, body {
    margin: 0;
    padding: 0;
    background-color: var(--bg);
    color: #e5e8ef;
    height: 100%;
    font-family: "Segoe UI", system-ui, sans-serif;
    -webkit-font-smoothing: antialiased;
    scroll-behavior: smooth;
  }

  .card {
    background-color: var(--card);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    padding: 2rem;
    margin: 2rem auto;
    width: 80%;
    max-width: 600px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .card:hover {
    transform: scale(1.02);
    box-shadow: 0 40px 100px -20px rgba(0,0,0,0.3);
  }

  .page-title {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    color: var(--accent);
    animation: fadeIn 0.5s ease-out;
  }

  ul {
    list-style: none;
    padding: 0;
  }

  ul li {
    font-size: 1rem;
    line-height: 1.8;
  }

  input[type="text"] {
    width: 100%;
    padding: 12px 20px;
    background-color: var(--input-bg);
    border: 1px solid rgba(255, 255, 255, 0.08);
    color: #e5e8ef;
    border-radius: 8px;
    margin-bottom: 1rem;
    transition: background 0.3s ease;
  }

  input[type="text"]:focus {
    background-color: rgba(255, 255, 255, 0.05);
    border-color: var(--accent);
  }

  .btn-upgrade {
    background-color: var(--accent);
    color: white;
    border: none;
    padding: 12px 24px;
    font-size: 1.1rem;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.3s ease;
  }

  .btn-upgrade:hover {
    background-color: #7faed4;
    transform: scale(1.05);
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @media (max-width: 700px) {
    .card {
      width: 90%;
      margin: 1.5rem auto;
    }
  }
</style>

{% endblock %}
"""
}

app.jinja_loader = DictLoader(templates)

# ==================== Datenbank ====================

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

import sqlite3

def init_db():
    with sqlite3.connect('users.db') as conn:
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                is_verified BOOLEAN DEFAULT 0,
                confirmation_code TEXT,
                role TEXT DEFAULT 'free',
                design INTEGER DEFAULT 1
            )
        ''')
        conn.commit()
        print("‚úÖ Datenbank und Tabelle 'users' wurden erfolgreich erstellt.")

def get_user_by_username(username):
    db = get_db()
    user = db.execute("SELECT * FROM users WHERE username = ?", (username,)).fetchone()
    return user

def get_user_by_email(email):
    db = get_db()
    user = db.execute("SELECT * FROM users WHERE email = ?", (email,)).fetchone()
    return user

def get_user_by_id(user_id):
    db = get_db()
    user = db.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()
    return user

def create_user(username, email, password_hash, confirmation_code):
    db = get_db()
    try:
        db.execute(
            "INSERT INTO users (username, email, password_hash, confirmation_code) VALUES (?, ?, ?, ?)",
            (username, email, password_hash, confirmation_code)
        )
        db.commit()
        return True
    except sqlite3.IntegrityError:
        return False

def confirm_user(email, code):
    db = get_db()
    user = db.execute("SELECT * FROM users WHERE email = ? AND confirmation_code = ?", (email, code)).fetchone()
    if user:
        db.execute("UPDATE users SET is_confirmed = 1, confirmation_code = NULL WHERE id = ?", (user['id'],))
        db.commit()
        return True
    return False

def save_chat_history(user_id, user_msg, bot_resp):
    db = get_db()
    timestamp = datetime.datetime.utcnow().isoformat()
    db.execute(
        "INSERT INTO chat_history (user_id, timestamp, user_message, bot_response) VALUES (?, ?, ?, ?)",
        (user_id, timestamp, user_msg, bot_resp)
    )
    db.commit()

def get_chat_history(user_id):
    db = get_db()
    rows = db.execute("SELECT * FROM chat_history WHERE user_id = ? ORDER BY id DESC LIMIT 50", (user_id,)).fetchall()
    return rows

def update_user_plan(user_id, plan):
    db = get_db()
    db.execute("UPDATE users SET plan = ? WHERE id = ?", (plan, user_id))
    db.commit()

# ==================== Email ====================

def send_confirmation_email(to_email, username, code):
    subject = "Dein Best√§tigungscode f√ºr OmegaAI"
    text = f"""
Hallo {username},

vielen Dank f√ºr deine Registrierung bei OmegaAI.

Dein Best√§tigungscode lautet:

{code}

Bitte gib diesen Code im Registrierungsformular ein, um deinen Account zu aktivieren.

Viel Spa√ü mit OmegaAI!
"""
    html = f"""
<html>
  <body>
    <p>Hallo <b>{username}</b>,</p>
    <p>vielen Dank f√ºr deine Registrierung bei OmegaAI.</p>
    <p><b>Dein Best√§tigungscode lautet:</b></p>
    <h2 style="color: #0a84ff; font-weight: 900; font-size: 2.2rem;">{code}</h2>
    <p>Bitte gib diesen Code im Registrierungsformular ein, um deinen Account zu aktivieren.</p>
    <p>Viel Spa√ü mit OmegaAI!</p>
  </body>
</html>
"""
    msg = MIMEMultipart("alternative")
    msg["Subject"] = subject
    msg["From"] = MAIL_USERNAME
    msg["To"] = to_email

    part1 = MIMEText(text, "plain", _charset="utf-8")
    part2 = MIMEText(html, "html", _charset="utf-8")

    msg.attach(part1)
    msg.attach(part2)

    context = ssl.create_default_context()
    with smtplib.SMTP_SSL(MAIL_SERVER, MAIL_PORT, context=context) as server:
        server.login(MAIL_USERNAME, MAIL_PASSWORD)
        server.sendmail(MAIL_USERNAME, to_email, msg.as_string())

# ==================== Helper ====================

def generate_confirmation_code():
    return ''.join(random.choices('0123456789', k=6))

def is_logged_in():
    return 'user_id' in session

def is_temp_logged_in():
    return 'temp_chat' in session

def get_current_user():
    if is_logged_in():
        return get_user_by_id(session['user_id'])
    return None

# ==================== Routen ===================
@app.route('/')
def index():
    if is_logged_in() or is_temp_logged_in():
        return redirect(url_for('chat_page'))
        return redirect(url_for('choose_device'))
    return redirect(url_for('login'))

@app.route("/choose_device", methods=["GET", "POST"])
def choose_device():
    device = session.get("device")

    if request.method == "POST":
        # Neues Ger√§t w√§hlen oder √§ndern
        if "device" in request.form:
            device_choice = request.form.get("device")
            if device_choice:
                session["device"] = device_choice
                flash(f"Ger√§t gesetzt: {device_choice}", "success")
                # Wenn bereits authentifiziert (normal oder tempor√§r), direkt in den Chat
                if is_authenticated():
                    return redirect(url_for("chat_page"))
                else:
                    # Wenn nicht eingeloggt, weiter zur Login-Seite
                    return redirect(url_for("login"))
        # R√ºcksetzen (optional)
        elif "clear" in request.form:
            session.pop("device", None)
            flash("Ger√§tewahl zur√ºckgesetzt.", "info")
        return redirect(url_for("choose_device"))

    # GET: Bleibt auf der Seite, zeigt aktuelle Auswahl (wenn vorhanden)
    return render_template("choose_device.html", device=device)

@app.route("/login", methods=["GET", "POST"])
def login():
    error = None
    username = ""
    # √úberpr√ºfen, ob es sich um einen tempor√§ren Login handelt
    if request.method == "POST" and "temp_chat" in session:
        data = request.get_json(force=True)
        username = data.get("username", "").strip()
        if not username or len(username) < 2 or len(username) > 30:
            return jsonify({"success": False, "error": "Bitte gib einen g√ºltigen Benutzernamen (3‚Äì30 Zeichen) ein."})
        
        # Tempor√§re Sitzung f√ºr den Chat
        session.clear()
        session["temp_chat"] = True
        session["temp_username"] = username
        session.permanent = False
        return jsonify({"success": True})

    # Regul√§re Login-Logik
    if request.method == "POST" and "temp_chat" not in session:
        username = request.form["username"]
        password = request.form["password"]
        remember = "remember" in request.form

        user = get_user_by_username(username)
        if user and check_password_hash(user["password"], password):
            session["user_id"] = user["id"]
            session["username"] = user["username"]
            session["is_admin"] = user.get("is_admin", False)
            if remember:
                session.permanent = True
            return redirect(url_for("chat_page"))
        else:
            error = "Ung√ºltiger Benutzername oder Passwort."

    return render_template("login.html", error=error, username=username)

@app.route('/logout')
def logout():
    session.clear()
    flash("Du wurdest abgemeldet.", "info")
    return redirect(url_for('login'))

@app.route("/admin")
def admin_panel():
    if not session.get("is_admin"):
        return redirect(url_for("login"))
    return render_template("admin.html", username=session.get("username"))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if is_logged_in() or is_temp_logged_in():
        return redirect(url_for('chat_page'))

    error = None
    step = 1
    username = ''
    email = ''

    if request.method == 'POST':
        if 'code' in request.form:
            email = session.get('register_email')
            username = session.get('register_username')
            code = request.form.get('code', '').strip()

            if not email or not username:
                error = "Ung√ºltige Sitzung. Bitte erneut registrieren."
                session.clear()
                step = 1
            elif confirm_user(email, code):
                user = get_user_by_email(email)
                session.clear()
                session['user_id'] = user['id']
                session.permanent = False
                flash("Dein Account wurde aktiviert. Willkommen!", "success")
                return redirect(url_for('chat_page'))
            else:
                error = "Falscher Best√§tigungscode."
                step = 2

        elif request.form.get('resend') == '1':
            email = session.get('register_email')
            username = session.get('register_username')
            if email and username:
                code = generate_confirmation_code()
                db = get_db()
                db.execute("UPDATE users SET confirmation_code = ? WHERE email = ?", (code, email))
                db.commit()
                try:
                    send_confirmation_email(email, username, code)
                    flash("Best√§tigungscode erneut gesendet.", "info")
                except:
                    error = "Fehler beim E-Mail-Versand."
                step = 2
            else:
                error = "Sitzung abgelaufen. Bitte neu registrieren."
                step = 1

        else:
            username = request.form.get('username', '').strip()
            email = request.form.get('email', '').strip().lower()
            password = request.form.get('password', '')

            if not username or len(username) < 3 or len(username) > 30:
                error = "Benutzername muss 3‚Äì30 Zeichen lang sein."
            elif not email or "@" not in email:
                error = "Bitte gib eine g√ºltige E-Mail-Adresse ein."
            elif len(password) < 6:
                error = "Passwort muss mindestens 6 Zeichen lang sein."
            elif get_user_by_username(username):
                error = "Benutzername ist bereits vergeben."
            elif get_user_by_email(email):
                error = "E-Mail ist bereits registriert."
            else:
                password_hash = generate_password_hash(password)
                code = generate_confirmation_code()
                if create_user(username, email, password_hash, code):
                    session['register_email'] = email
                    session['register_username'] = username
                    try:
                        send_confirmation_email(email, username, code)
                        flash("Best√§tigungscode wurde an deine E-Mail gesendet.", "info")
                    except:
                        error = "Fehler beim Senden der E-Mail."
                    step = 2
                else:
                    error = "Registrierung fehlgeschlagen."
                    step = 1

    return render_template("register.html", error=error, step=step, username=username, email=email)

@app.route("/chat_page", methods=["GET", "POST"])
def chat_page():
    messages = []
    user = get_current_user()
    user_id = user['id'] if user else None

    if request.method == 'GET':
        # Lade Chatverlauf bei GET
        if user_id:
            rows = get_chat_history(user_id)
            for row in reversed(rows):
                messages.append({'role': 'user', 'text': row['user_message']})
                messages.append({'role': 'bot', 'text': row['bot_response']})
        return render_template("chat.html", messages=messages)

    # POST: Anfrage vom Chat-Formular
    data = request.get_json(force=True)
    user_input = data.get('user_input', '').strip()
    if not user_input:
        return jsonify({'reply': 'Bitte gib eine Nachricht ein.'})

    # Historie vorbereiten (letzte 10 Messages)
    context_messages = []
    if user_id:
        rows = get_chat_history(user_id)
        count = 0
        for row in reversed(rows):
            context_messages.append({"role": "user", "content": row["user_message"]})
            context_messages.append({"role": "assistant", "content": row["bot_response"]})
            count += 1
            if count >= 10:
                break

    context_messages.append({"role": "user", "content": user_input})

    try:
        # API Call an OpenAI ChatCompletion
        completion = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=context_messages,
            max_tokens=None,
            temperature=0.7,
            n=1,
            stop=None,
        )
        bot_reply = completion.choices[0].message.content.strip()
    except Exception:
        bot_reply = "Leider gab es einen Fehler bei der Antwort. Bitte versuche es sp√§ter nochmal."

    if user_id:
        save_chat_history(user_id, user_input, bot_reply)

    return jsonify({'reply': bot_reply})

@app.route('/history')
def history_page():
    if not is_logged_in():
        return redirect(url_for('login'))

    user = get_current_user()
    if not user:
        return redirect(url_for('login'))

    history = get_chat_history(user['id'])
    return render_template("history.html", history=history)

@app.route("/upgrade", methods=['GET', 'POST'])
def upgrade_page():
    if not is_logged_in():
        return redirect(url_for('login'))

    user = get_current_user()
    error = None
    success = None
    current_plan = user['plan'] if user else 'free'

    if request.method == 'POST':
        selected_plan = request.form.get('plan')
        payment_method = request.form.get('payment_method', '').strip()
        payment_info = request.form.get('payment_info', '').strip()

        if selected_plan not in ['free', 'pro', 'deluxe']:
            error = "Bitte w√§hle einen g√ºltigen Tarif."
        elif selected_plan in ['pro', 'deluxe']:
            # Pr√ºfe Zahlungsdaten
            if not payment_method or not payment_info:
                error = "Bitte gib deine Zahlungsdaten ein."
            else:
                # In einem echten System w√ºrde hier die Zahlung validiert
                update_user_plan(user['id'], selected_plan)
                success = f"Dein Plan wurde auf {selected_plan.capitalize()} ge√§ndert."
                current_plan = selected_plan
        else:
            # Free Plan ohne Zahlung
            update_user_plan(user['id'], 'free')
            success = "Du hast den Gratis-Plan gew√§hlt."
            current_plan = 'free'

    return render_template("upgrade.html", error=error, success=success, current_plan=current_plan)

# ==================== Server Start ====================

if __name__ == '__main__':
    app.run(debug=True)
